// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Character {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  age       Int
  race      String // dragonborn, dwarf, elf, gnome, half-elf, halfling, half-orc, human
  createdAt DateTime? @default(now())
}

model Example {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Author {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  displayName  String
  username     String
  avatar       String
  ForumComment ForumComment[]
  ForumPost    ForumPost[]
}

model ForumComment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  likes    Int
  author   Author   @relation(fields: [authorId], references: [id])
  authorId String   @db.ObjectId
  date     DateTime @default(now())
  content  String
}

enum ForumPostType {
  Image
  Video
  Text
}

model ForumPost {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  likes    Int
  author   Author        @relation(fields: [authorId], references: [id])
  authorId String        @db.ObjectId
  date     DateTime      @default(now())
  type     ForumPostType
  keywords String[]
  content  String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
